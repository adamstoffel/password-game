name: Build (and deploy)
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  terraform_dir: "./.infra"
  ARM_ENVIRONMENT: public
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_TFSTATE_RESOURCE_GROUP: ${{ secrets.AZURE_TFSTATE_RESOURCE_GROUP }}
  AZURE_TFSTATE_STORAGE_ACCOUNT: ${{ secrets.AZURE_TFSTATE_STORAGE_ACCOUNT }}
  
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./.infra
    outputs:
      cat_game_app_service_name: ${{ steps.output_cat_game_app_service_name.outputs.value }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        continue-on-error: true
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: |
            terraform init \
              -backend-config "resource_group_name=${{ env.AZURE_TFSTATE_RESOURCE_GROUP }}" \
              -backend-config "storage_account_name=${{ env.AZURE_TFSTATE_STORAGE_ACCOUNT }}"
      - name: Terraform Import
        id: import
        run: |
          terraform import \
              -var "azure_resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
              azurerm_resource_group.main_rg /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        run: |
            terraform plan -no-color \
              -var "azure_resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}"
      - name: Terraform Apply
        id: apply
        #if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')
        run: |
            terraform apply -auto-approve -no-color \
              -var "azure_resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}"
      - name: Terraform Output
        id: output_cat_game_app_service_name
        run: |
          echo "::set-output name=value::$(terraform output cat_game_app_service_name)"

  deploy-apps:
    name: Deploy Apps
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Build cats-game
        working-directory: ./cat-game
        run: |
            npm install
            npm run build
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ env.ARM_CLIENT_ID }}",
            "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ env.ARM_TENANT_ID }}",
          }
    - name: 'Deploy cat-game'
      id: deploy_cat_game
      uses: azure/webapps-deploy@v2
      #if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')
      with:
        app-name: ${{ needs.terraform.ouputs.cat_game_app_service_name }}
        package: ./cat-game/dist
    - run: |
        echo "The 'cat-game' app was deployed to: ${{ steps.deploy_cat_game.outputs.webapp-url }}"
